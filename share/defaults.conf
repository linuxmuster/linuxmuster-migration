#
# thomas@linuxmuster.net
# 20160711
# GPL v3
#
# Contains variables used by migrations scripts. Don't change.
#
# migration specific environment
MIGCONFDIR="$SYSCONFDIR/migration"
MIGDATADIR="$DATADIR/migration"
MIGBACKLOG="$LOGDIR/migration-backup.log"
MIGRESTLOG="$LOGDIR/migration-restore.log"
MIGEXSYSTEM="$MIGDATADIR/exclude.conf"
MIGEXUSER="$MIGCONFDIR/exclude.conf"
MIGINSYSTEM="$MIGDATADIR/include.conf"
MIGINUSER="$MIGCONFDIR/include.conf"
INCONFTMP=/tmp/migration.include.conf.$$
INCONFILTERED=/tmp/migration.include.conf.filtered.$$
EXCONFTMP=/tmp/migration.exclude.conf.$$
INPARAM="--files-from=$INCONFILTERED"
EXPARAM="--exclude-from=$EXCONFTMP"
NFSTEMPDIRS="/ /var/tmp /home"

# base configuration variables used at backup and restore, don't change
BASEDATA="schoolname sambasid location country state workgroup domainname
          servername internsubrange"

# name of file which stores the base configuration variables
BASEDATAFILE="linuxmuster-base.data"

# allowed subranges for internal net
SUBRANGES="16-31 32-47 48-63 64-79 80-95 96-111 112-127 128-143 144-159 160-175
           176-191 192-207 208-223 224-239"

# mainversion of source system
MAINVERSION="${DISTFULLVERSION:0:1}"

# supported versions for backup
BACKUPVERSIONS="4.0.6 5.0.0 5.0.1 5.0.2 5.0.3 5.0.4 5.1.0 6.0 6.1 6.2"

# versions supported for restore
RESTOREVERSIONS="6.0 6.1 6.2"

# name of ldap's dump file
LDIF="ldap.ldif"

# name of the files backup folder
BACKUPFOLDER="filesystem"

# name of the issue file
ISSUE="issue"

# name of the mysql metadata dump file
MYSQLMETA="mysql.metadata"

# name of the postgresql metadata dump file
PGSQLMETA="pgsql.metadata"

# name of the file which stores the package selections
SELECTIONS="selections"

# filter this packages out
PKGFILTER="acpi apache-common ark arts atftpd atlantik avahi busybox console cpp \
           cups cyrus db4.6-util dbus dcop debian-archive-keyring dhcp doc-debian \
           enscript esound-common firmware-linux-free font foomatic-filters-ppds \
           g++-4.1 g++-4.3 gcc grub hicolor-icon-theme initscripts \
           installation-report iceweasel ifupdown iodbc kbd kdelibs ksysguard \
           lib linux-image linux-headers linuxmuster-schulkonsole-templates \
           linux-base linux-kbuild linuxmuster-freefork linuxmuster-indexpage lzma \
           mailx menu-xdg moodle mysql ncurses noatun odbc openbsd-inetd openntpd \
           oss-compat paedml-updates-repository-key perl-suid php4-common php4-pear \
           pkipplib pmount poppler postgresql python radiusclient recode ruby \
           superkaramba svgalibg1 system-log-daemon sysutils tftpd-hpa tcl8 tk8 tex \
           uml-utilities unzoo uucp vnc-common webmin xulrunner yui"

# list of supported filesystems on the backup medium
# "ext2/ext3" includes also ext4
SUPPORTEDFS="ext2/ext3 reiserfs xfs nfs"

# list of services which will be shutted down during filesystem backup, start sequence
SERVICES="slapd saslauthd nscd freeradius cron postgresql mysql samba smbd nmbd postfix apache2 
          cyrus2.2 cyrus-imapd clamav-daemon clamav-freshclam rsync atftpd tftpd-hpa bittorrent
          linbo-bittorrent linbo-multicast bind9 dhcp3-server isc-dhcp-server cups nagios3"

# flag which will be created if custom.conf values are set
CUSTOMFLAG=".custom"

# name of firewall backup archive
FWARCHIVE="firewall.tar.gz"

# name of firewall's network settings file
FWSETTINGS="firewall.ethernet.settings"

# name of file which stores the firewall type (ipcop|ipfire)
FWTYPE="fwtype"

# name of file which stores the amount of quota partitions
QUOTAPARTS="quotaparts"

# apt configuration tweak for upgrade
APTCONFTWEAK="/etc/apt/apt.conf.d/99upgrade_tweak"

# required enryption method for server certificate on versions greater than 6
SERVERCERT="/etc/ssl/private/server.crt"
REQENCRMETHOD="sha1WithRSAEncryption"

# get current firewall
if test_pwless_fw; then
 for i in ipcop ipfire; do
  if ssh -p 222 $ipcopip ls /var/$i &> /dev/null; then
   CURRENTFW=$i
   break
  fi
 done
else
 echo "Cannot connect to firewall. Assuming custom firewall!"
 sleep 5
 CURRENTFW=custom
fi

# test opsi
if [ -n "$opsiip" ]; then
 if ! test_pwless_opsi; then
  echo "Opsi is not available or not installed correctly. Be sure the opsi machine is running and configured."
  exit 1
 fi
fi

# functions

# start/stop services
start_stop_services(){
 local action="$1"
 local list
 case $action in 
  start) list="$SERVICES" ;;
  # revert sequence for service stop
  stop) list="$(echo $SERVICES | sed -e 's| |\n|g' | tac)" ;;
  *) return 1 ;;
 esac
 local i
 for i in $list; do
  if [ $MAINVERSION -lt 6 ]; then
   [ -e "/etc/init.d/$i" ] && /etc/init.d/$i $action
  else
   [ -e "/etc/init.d/$i" -o -e "/etc/init/$i.conf" ] && service $i $action
  fi
 done
 return 0
}

# exit with error
error(){
 local msg="$1"
 [ -n "$msg" ] && echo "$msg" | tee -a $MIGRESTLOG
 rm -f "$EXCONFTMP"
 rm -f "$INCONFTMP"
 rm -f "$INCONFILTERED"
 exit 1
}

# wait until firewall is online again after reboot
wait_for_fw(){
 # waiting 300 secs max for firewall to come up
 local c=0
 local s=10
 local maxwait=300
 local minwait=60
 local fwup=""
 echo -n " * waiting for firewall "
 while [ $c -lt $maxwait ]; do
  echo -n "."
  sleep $s
  let c+=$s
  [ $c -lt $minwait ] && continue
  [ -n "$fwup" ] && break
  ping -c 2 www.linuxmuster.net &> /dev/null && fwup="yes"
 done
 if [ -n "$fwup" ]; then
  echo " OK!"
  return 0
 else
  echo " Firewall does not come up after $maxwait seconds!"
  return 1
 fi
}

# concenate system and user configs
concenate_configs(){
 echo -n "Merging system and user configs:"
 local usertest=""
 # merging excludes
 cp "$MIGEXSYSTEM" "$EXCONFTMP" || return 1
 cat "$MIGEXUSER" >> "$EXCONFTMP" || return 1
 # merging includes
 grep ^/ "$MIGINSYSTEM" > "$INCONFTMP" || return 1
 usertest="$(grep ^/ "$MIGINUSER")"
 if [ -n "$usertest" ]; then
  grep ^/ "$MIGINUSER" >> "$INCONFTMP" || return 1
 fi
 echo " OK!"
 return 0
}

# check if source dir is on nfs share
nfs_check(){
 FSTYPE="$(stat -f -c %T $SOURCEDIR)"
 if [ "$FSTYPE" = "nfs" ]; then
  grep nfs /proc/mounts | while read NFSSHARE NFSMNTDIR NFSTYPE relax; do
   if stringinstring "$NFSMNTDIR" "$SOURCEDIR"; then
    echo "$NFSSHARE $NFSMNTDIR $NFSTYPE"
    return 0
   fi
  done
 fi
 return 1
}

# unmount nfs share
umount_nfs(){
 if [ -n "$NFSTYPE" ]; then
  cd "$SOURCEDIR"
  if ! umount "$NFSMNTDIR"; then
   lsof | grep "$NFSMNTDIR"
   error "Cannot unmount $NFSSHARE!"
  fi
 fi
}

